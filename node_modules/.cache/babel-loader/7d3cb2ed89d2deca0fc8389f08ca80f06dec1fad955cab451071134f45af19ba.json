{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport CartItem from \"../../components/CartItem\";\nconst initialState = {\n  totalPrice: 0,\n  items: getCartFromLS()\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addItem(state, action) {\n      const findItem = state.items.find(obj => obj.id === action.payload.id);\n      if (findItem) {\n        findItem.count++;\n      } else {\n        state.items.push({\n          ...action.payload,\n          count: 1\n        });\n      }\n      state.totalPrice = state.items.reduce((sum, obj) => {\n        return obj.price * obj.count + sum;\n      }, 0);\n    },\n    minusItem(state, action) {\n      const findItem = state.items.find(obj => obj.id === action.payload);\n      if (findItem) {\n        findItem.count--;\n        state.totalPrice = state.items.reduce((sum, obj) => {\n          return state.totalPrice - obj.price;\n        }, 0);\n      }\n    },\n    removeItem(state, action) {\n      state.items = state.items.filter(obj => obj.id !== action.payload);\n      state.totalPrice = state.items.reduce((sum, obj) => {\n        return sum - obj.price * obj.count;\n      }, 0);\n    },\n    clearItem(state) {\n      state.items = [];\n      state.totalPrice = 0;\n    }\n  }\n});\nexport const selectCart = state => state.cart;\nexport const selectCartItemById = id => state => state.cart.items.find(obj => obj.id === id);\nexport const {\n  addItem,\n  removeItem,\n  clearItem,\n  minusItem\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","CartItem","initialState","totalPrice","items","getCartFromLS","cartSlice","name","reducers","addItem","state","action","findItem","find","obj","id","payload","count","push","reduce","sum","price","minusItem","removeItem","filter","clearItem","selectCart","cart","selectCartItemById","actions","reducer"],"sources":["C:/DS/programming/react-pizza/src/redux/slices/cartSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport CartItem from \"../../components/CartItem\";\r\nimport { RootState } from \"../store\";\r\n\r\nexport type CartItem = {\r\n  id: string;\r\n  title: string;\r\n  price: number;\r\n  imageUrl: string;\r\n  type: string;\r\n  size: number;\r\n  count: number;\r\n};\r\n\r\ninterface CartSliceState {\r\n  totalPrice: number;\r\n  items: CartItem[];\r\n}\r\n\r\nconst initialState: CartSliceState = {\r\n  totalPrice: 0,\r\n  items: getCartFromLS(),\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    addItem(state, action: PayloadAction<CartItem>) {\r\n      const findItem = state.items.find((obj) => obj.id === action.payload.id);\r\n\r\n      if (findItem) {\r\n        findItem.count++;\r\n      } else {\r\n        state.items.push({\r\n          ...action.payload,\r\n          count: 1,\r\n        });\r\n      }\r\n      state.totalPrice = state.items.reduce((sum, obj) => {\r\n        return obj.price * obj.count + sum;\r\n      }, 0);\r\n    },\r\n    minusItem(state, action: PayloadAction<string>) {\r\n      const findItem = state.items.find((obj) => obj.id === action.payload);\r\n      if (findItem) {\r\n        findItem.count--;\r\n        state.totalPrice = state.items.reduce((sum, obj) => {\r\n          return state.totalPrice - obj.price;\r\n        }, 0);\r\n      }\r\n    },\r\n    removeItem(state, action: PayloadAction<string>) {\r\n      state.items = state.items.filter((obj) => obj.id !== action.payload);\r\n      state.totalPrice = state.items.reduce((sum, obj) => {\r\n        return sum - obj.price * obj.count;\r\n      }, 0);\r\n    },\r\n    clearItem(state) {\r\n      state.items = [];\r\n      state.totalPrice = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectCart = (state: RootState) => state.cart;\r\nexport const selectCartItemById = (id: string) => (state: RootState) =>\r\n  state.cart.items.find((obj) => obj.id === id);\r\n\r\nexport const { addItem, removeItem, clearItem, minusItem } = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAC7D,OAAOC,QAAQ,MAAM,2BAA2B;AAkBhD,MAAMC,YAA4B,GAAG;EACnCC,UAAU,EAAE,CAAC;EACbC,KAAK,EAAEC,aAAa;AACtB,CAAC;AAED,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC5BO,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE;IACRC,OAAO,CAACC,KAAK,EAAEC,MAA+B,EAAE;MAC9C,MAAMC,QAAQ,GAAGF,KAAK,CAACN,KAAK,CAACS,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MAExE,IAAIH,QAAQ,EAAE;QACZA,QAAQ,CAACK,KAAK,EAAE;MAClB,CAAC,MAAM;QACLP,KAAK,CAACN,KAAK,CAACc,IAAI,CAAC;UACf,GAAGP,MAAM,CAACK,OAAO;UACjBC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;MACAP,KAAK,CAACP,UAAU,GAAGO,KAAK,CAACN,KAAK,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEN,GAAG,KAAK;QAClD,OAAOA,GAAG,CAACO,KAAK,GAAGP,GAAG,CAACG,KAAK,GAAGG,GAAG;MACpC,CAAC,EAAE,CAAC,CAAC;IACP,CAAC;IACDE,SAAS,CAACZ,KAAK,EAAEC,MAA6B,EAAE;MAC9C,MAAMC,QAAQ,GAAGF,KAAK,CAACN,KAAK,CAACS,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MACrE,IAAIJ,QAAQ,EAAE;QACZA,QAAQ,CAACK,KAAK,EAAE;QAChBP,KAAK,CAACP,UAAU,GAAGO,KAAK,CAACN,KAAK,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEN,GAAG,KAAK;UAClD,OAAOJ,KAAK,CAACP,UAAU,GAAGW,GAAG,CAACO,KAAK;QACrC,CAAC,EAAE,CAAC,CAAC;MACP;IACF,CAAC;IACDE,UAAU,CAACb,KAAK,EAAEC,MAA6B,EAAE;MAC/CD,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACoB,MAAM,CAAEV,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MACpEN,KAAK,CAACP,UAAU,GAAGO,KAAK,CAACN,KAAK,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEN,GAAG,KAAK;QAClD,OAAOM,GAAG,GAAGN,GAAG,CAACO,KAAK,GAAGP,GAAG,CAACG,KAAK;MACpC,CAAC,EAAE,CAAC,CAAC;IACP,CAAC;IACDQ,SAAS,CAACf,KAAK,EAAE;MACfA,KAAK,CAACN,KAAK,GAAG,EAAE;MAChBM,KAAK,CAACP,UAAU,GAAG,CAAC;IACtB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMuB,UAAU,GAAIhB,KAAgB,IAAKA,KAAK,CAACiB,IAAI;AAC1D,OAAO,MAAMC,kBAAkB,GAAIb,EAAU,IAAML,KAAgB,IACjEA,KAAK,CAACiB,IAAI,CAACvB,KAAK,CAACS,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKA,EAAE,CAAC;AAE/C,OAAO,MAAM;EAAEN,OAAO;EAAEc,UAAU;EAAEE,SAAS;EAAEH;AAAU,CAAC,GAAGhB,SAAS,CAACuB,OAAO;AAE9E,eAAevB,SAAS,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}