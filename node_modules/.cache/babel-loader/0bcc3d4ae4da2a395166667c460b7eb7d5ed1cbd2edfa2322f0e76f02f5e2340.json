{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { calcTotalPrice } from \"../../../utils/calcTotalPrice\";\nimport { getCartFromLS } from \"../../../utils/getCartFromLS\";\nconst {\n  items,\n  totalPrice\n} = getCartFromLS();\nconst initialState = {\n  totalPrice,\n  items\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addItem(state, action) {\n      const findItem = state.items.find(obj => obj.id === action.payload.id);\n      if (findItem) {\n        findItem.count++;\n      } else {\n        state.items.push({\n          ...action.payload,\n          count: 1\n        });\n      }\n      state.totalPrice = calcTotalPrice(state.items);\n    },\n    minusItem(state, action) {\n      const findItem = state.items.find(obj => obj.id === action.payload);\n      if (findItem) {\n        findItem.count--;\n        state.totalPrice = state.items.reduce((sum, obj) => {\n          return state.totalPrice - obj.price;\n        }, 0);\n      }\n    },\n    removeItem(state, action) {\n      state.items = state.items.filter(obj => obj.id !== action.payload);\n      state.totalPrice = state.items.reduce((sum, obj) => {\n        return sum - obj.price * obj.count;\n      }, 0);\n    },\n    clearItem(state) {\n      state.items = [];\n      state.totalPrice = 0;\n    }\n  }\n});\nexport const {\n  addItem,\n  removeItem,\n  clearItem,\n  minusItem\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","calcTotalPrice","getCartFromLS","items","totalPrice","initialState","cartSlice","name","reducers","addItem","state","action","findItem","find","obj","id","payload","count","push","minusItem","reduce","sum","price","removeItem","filter","clearItem","actions","reducer"],"sources":["C:/DS/programming/react-pizza/src/redux/slices/cart/slice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { calcTotalPrice } from \"../../../utils/calcTotalPrice\";\r\nimport { getCartFromLS } from \"../../../utils/getCartFromLS\";\r\nimport {CartItem, CartSliceState } from \"./types\";\r\n\r\n\r\n\r\nconst {items, totalPrice} = getCartFromLS()\r\n\r\nconst initialState: CartSliceState = {\r\n  totalPrice,\r\n  items\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    addItem(state, action: PayloadAction<CartItem>) {\r\n      const findItem = state.items.find((obj) => obj.id === action.payload.id);\r\n\r\n      if (findItem) {\r\n        findItem.count++;\r\n      } else {\r\n        state.items.push({\r\n          ...action.payload,\r\n          count: 1,\r\n        });\r\n      }\r\n      state.totalPrice = calcTotalPrice(state.items)\r\n    },\r\n    minusItem(state, action: PayloadAction<string>) {\r\n      const findItem = state.items.find((obj) => obj.id === action.payload);\r\n      if (findItem) {\r\n        findItem.count--;\r\n        state.totalPrice = state.items.reduce((sum, obj) => {\r\n          return state.totalPrice - obj.price;\r\n        }, 0);\r\n      }\r\n    },\r\n    removeItem(state, action: PayloadAction<string>) {\r\n      state.items = state.items.filter((obj) => obj.id !== action.payload);\r\n      state.totalPrice = state.items.reduce((sum, obj) => {\r\n        return sum - obj.price * obj.count;\r\n      }, 0);\r\n    },\r\n    clearItem(state) {\r\n      state.items = [];\r\n      state.totalPrice = 0;\r\n    },\r\n  },\r\n});\r\n\r\n\r\n\r\nexport const { addItem, removeItem, clearItem, minusItem } = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAC7D,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,SAASC,aAAa,QAAQ,8BAA8B;AAK5D,MAAM;EAACC,KAAK;EAAEC;AAAU,CAAC,GAAGF,aAAa,EAAE;AAE3C,MAAMG,YAA4B,GAAG;EACnCD,UAAU;EACVD;AACF,CAAC;AAED,MAAMG,SAAS,GAAGN,WAAW,CAAC;EAC5BO,IAAI,EAAE,MAAM;EACZF,YAAY;EACZG,QAAQ,EAAE;IACRC,OAAO,CAACC,KAAK,EAAEC,MAA+B,EAAE;MAC9C,MAAMC,QAAQ,GAAGF,KAAK,CAACP,KAAK,CAACU,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MAExE,IAAIH,QAAQ,EAAE;QACZA,QAAQ,CAACK,KAAK,EAAE;MAClB,CAAC,MAAM;QACLP,KAAK,CAACP,KAAK,CAACe,IAAI,CAAC;UACf,GAAGP,MAAM,CAACK,OAAO;UACjBC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;MACAP,KAAK,CAACN,UAAU,GAAGH,cAAc,CAACS,KAAK,CAACP,KAAK,CAAC;IAChD,CAAC;IACDgB,SAAS,CAACT,KAAK,EAAEC,MAA6B,EAAE;MAC9C,MAAMC,QAAQ,GAAGF,KAAK,CAACP,KAAK,CAACU,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MACrE,IAAIJ,QAAQ,EAAE;QACZA,QAAQ,CAACK,KAAK,EAAE;QAChBP,KAAK,CAACN,UAAU,GAAGM,KAAK,CAACP,KAAK,CAACiB,MAAM,CAAC,CAACC,GAAG,EAAEP,GAAG,KAAK;UAClD,OAAOJ,KAAK,CAACN,UAAU,GAAGU,GAAG,CAACQ,KAAK;QACrC,CAAC,EAAE,CAAC,CAAC;MACP;IACF,CAAC;IACDC,UAAU,CAACb,KAAK,EAAEC,MAA6B,EAAE;MAC/CD,KAAK,CAACP,KAAK,GAAGO,KAAK,CAACP,KAAK,CAACqB,MAAM,CAAEV,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MACpEN,KAAK,CAACN,UAAU,GAAGM,KAAK,CAACP,KAAK,CAACiB,MAAM,CAAC,CAACC,GAAG,EAAEP,GAAG,KAAK;QAClD,OAAOO,GAAG,GAAGP,GAAG,CAACQ,KAAK,GAAGR,GAAG,CAACG,KAAK;MACpC,CAAC,EAAE,CAAC,CAAC;IACP,CAAC;IACDQ,SAAS,CAACf,KAAK,EAAE;MACfA,KAAK,CAACP,KAAK,GAAG,EAAE;MAChBO,KAAK,CAACN,UAAU,GAAG,CAAC;IACtB;EACF;AACF,CAAC,CAAC;AAIF,OAAO,MAAM;EAAEK,OAAO;EAAEc,UAAU;EAAEE,SAAS;EAAEN;AAAU,CAAC,GAAGb,SAAS,CAACoB,OAAO;AAE9E,eAAepB,SAAS,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}