{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n// type FetchPizzasArgs = Record<string, string>;//когда всё строчки\n\nexport const fetchPizzas = createAsyncThunk(\"pizza/fetchPizzasStatus\", async (params, thunkAPI) => {\n  const {\n    sortBy,\n    order,\n    category,\n    search,\n    currentPage\n  } = params;\n  const {\n    data\n  } = await axios.get(`https://63a2fd389704d18da08257f0.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`);\n  if (data.length === 0) {\n    thunkAPI.rejectWithValue('Пиццы пустые');\n  }\n  return thunkAPI.fulfillWithValue(data);\n});\nconst initialState = {\n  items: [],\n  status: \"loading\" //loading|success|error\n};\n\nconst pizzaSlice = createSlice({\n  name: \"pizza\",\n  initialState,\n  reducers: {\n    setItems(state, action) {\n      state.items = action.payload;\n    }\n  },\n  extraReducers: builder\n  // extraReducers: {\n  //   [fetchPizzas.pending]: (state) => {\n  //     state.status = \"loading\";\n  //     state.items = []\n  //   },\n  //   [fetchPizzas.fulfilled]: (state, action) => {\n  //     console.log(action, \"fulfilled\")\n  //     state.items = action.payload;\n  //     state.status = \"success\";\n  //   },\n  //   [fetchPizzas.rejected]: (state, action) => {\n  //     console.log(action, \"rejected\")\n  //     state.status = \"error\";\n  //     state.items = [];\n  //   },\n  // },\n});\n\nexport const selectPizzaData = state => state.pizza;\nexport const {\n  setItems\n} = pizzaSlice.actions;\nexport default pizzaSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchPizzas","params","thunkAPI","sortBy","order","category","search","currentPage","data","get","length","rejectWithValue","fulfillWithValue","initialState","items","status","pizzaSlice","name","reducers","setItems","state","action","payload","extraReducers","builder","selectPizzaData","pizza","actions","reducer"],"sources":["C:/DS/programming/react-pizza/src/redux/slices/pizzaSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nimport axios from \"axios\";\r\nimport { RootState } from \"../store\";\r\nimport { CartItem } from \"./cartSlice\";\r\n\r\n// type FetchPizzasArgs = Record<string, string>;//когда всё строчки\r\n\r\nexport const fetchPizzas = createAsyncThunk<CartItem[], Record<string, string>>(\r\n  \"pizza/fetchPizzasStatus\",\r\n  async (params, thunkAPI) => {\r\n    const { sortBy, order, category, search, currentPage } = params;\r\n    const { data } = await axios.get<CartItem[]>(\r\n      `https://63a2fd389704d18da08257f0.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`\r\n    );\r\n\r\n    if(data.length === 0){\r\n      thunkAPI.rejectWithValue('Пиццы пустые')\r\n    }\r\n    return thunkAPI.fulfillWithValue(data)\r\n  }\r\n);\r\n\r\ntype Pizza = {\r\n  id: string;\r\n  title: string;\r\n  price: number;\r\n  imageUrl: string;\r\n  sizes: number[];\r\n  types: number[];\r\n}\r\n\r\ninterface PizzaSliceState {\r\n  items:Pizza[];\r\n  status: 'loading' | 'success' | 'error';\r\n}\r\n\r\nconst initialState: PizzaSliceState = {\r\n  items: [],\r\n  status: \"loading\", //loading|success|error\r\n};\r\n\r\nconst pizzaSlice = createSlice({\r\n  name: \"pizza\",\r\n  initialState,\r\n  reducers: {\r\n    setItems(state, action) {\r\n      state.items = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) \r\n  // extraReducers: {\r\n  //   [fetchPizzas.pending]: (state) => {\r\n  //     state.status = \"loading\";\r\n  //     state.items = []\r\n  //   },\r\n  //   [fetchPizzas.fulfilled]: (state, action) => {\r\n  //     console.log(action, \"fulfilled\")\r\n  //     state.items = action.payload;\r\n  //     state.status = \"success\";\r\n  //   },\r\n  //   [fetchPizzas.rejected]: (state, action) => {\r\n  //     console.log(action, \"rejected\")\r\n  //     state.status = \"error\";\r\n  //     state.items = [];\r\n  //   },\r\n  // },\r\n});\r\n\r\nexport const selectPizzaData = (state: RootState) => state.pizza;\r\n\r\nexport const { setItems } = pizzaSlice.actions;\r\n\r\nexport default pizzaSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAOC,KAAK,MAAM,OAAO;AAIzB;;AAEA,OAAO,MAAMC,WAAW,GAAGF,gBAAgB,CACzC,yBAAyB,EACzB,OAAOG,MAAM,EAAEC,QAAQ,KAAK;EAC1B,MAAM;IAAEC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAGN,MAAM;EAC/D,MAAM;IAAEO;EAAK,CAAC,GAAG,MAAMT,KAAK,CAACU,GAAG,CAC7B,0DAAyDF,WAAY,YAAWF,QAAS,WAAUF,MAAO,UAASC,KAAM,GAAEE,MAAO,EAAC,CACrI;EAED,IAAGE,IAAI,CAACE,MAAM,KAAK,CAAC,EAAC;IACnBR,QAAQ,CAACS,eAAe,CAAC,cAAc,CAAC;EAC1C;EACA,OAAOT,QAAQ,CAACU,gBAAgB,CAACJ,IAAI,CAAC;AACxC,CAAC,CACF;AAgBD,MAAMK,YAA6B,GAAG;EACpCC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,SAAS,CAAE;AACrB,CAAC;;AAED,MAAMC,UAAU,GAAGnB,WAAW,CAAC;EAC7BoB,IAAI,EAAE,OAAO;EACbJ,YAAY;EACZK,QAAQ,EAAE;IACRC,QAAQ,CAACC,KAAK,EAAEC,MAAM,EAAE;MACtBD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO;IAC9B;EACF,CAAC;EACDC,aAAa,EAAGC;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;;AAEF,OAAO,MAAMC,eAAe,GAAIL,KAAgB,IAAKA,KAAK,CAACM,KAAK;AAEhE,OAAO,MAAM;EAAEP;AAAS,CAAC,GAAGH,UAAU,CAACW,OAAO;AAE9C,eAAeX,UAAU,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}