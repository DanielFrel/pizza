{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  items: [],\n  status: \"loading\" //loading|success|error\n};\n\n// type FetchPizzasArgs = Record<string, string>;//когда всё строчки\n\nexport const fetchPizzas = createAsyncThunk(\"pizza/fetchPizzasStatus\", async (params, thunkAPI) => {\n  const {\n    sortBy,\n    order,\n    category,\n    search,\n    currentPage\n  } = params;\n  const {\n    data\n  } = await axios.get(`https://63a2fd389704d18da08257f0.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`);\n\n  // if (data.length === 0) {\n  //   thunkAPI.rejectWithValue(\"Пиццы пустые\");\n  // }\n  // return thunkAPI.fulfillWithValue(data);\n});\n\nconst pizzaSlice = createSlice({\n  name: \"pizza\",\n  initialState,\n  reducers: {\n    setItems(state, action) {\n      state.items = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPizzas.pending, (state, action) => {\n      state.status = \"loading\";\n      state.items = [];\n    });\n    builder.addCase(fetchPizzas.fulfilled, (state, action) => {\n      state.items = action.payload;\n      state.status = \"success\";\n    });\n    builder.addCase(fetchPizzas.rejected, (state, action) => {\n      state.status = \"error\";\n      state.items = [];\n    });\n  }\n});\nexport const selectPizzaData = state => state.pizza;\nexport const {\n  setItems\n} = pizzaSlice.actions;\nexport default pizzaSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","items","status","fetchPizzas","params","thunkAPI","sortBy","order","category","search","currentPage","data","get","pizzaSlice","name","reducers","setItems","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","selectPizzaData","pizza","actions","reducer"],"sources":["C:/DS/programming/react-pizza/src/redux/slices/pizzaSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport axios from \"axios\";\r\nimport { RootState } from \"../store\";\r\n\r\ntype Pizza = {\r\n  id: string;\r\n  title: string;\r\n  price: number;\r\n  imageUrl: string;\r\n  sizes: number[];\r\n  types: number[];\r\n};\r\n\r\ninterface PizzaSliceState {\r\n  items: Pizza[];\r\n  status: \"loading\" | \"success\" | \"error\";\r\n}\r\n\r\nconst initialState: PizzaSliceState = {\r\n  items: [],\r\n  status: \"loading\", //loading|success|error\r\n};\r\n\r\n// type FetchPizzasArgs = Record<string, string>;//когда всё строчки\r\n\r\nexport const fetchPizzas = createAsyncThunk<Pizza[], Record<string, string>>(\r\n  \"pizza/fetchPizzasStatus\",\r\n  async (params, thunkAPI) => {\r\n    const { sortBy, order, category, search, currentPage } = params;\r\n    const { data } = await axios.get<Pizza[]>(\r\n      `https://63a2fd389704d18da08257f0.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`\r\n    );\r\n\r\n    // if (data.length === 0) {\r\n    //   thunkAPI.rejectWithValue(\"Пиццы пустые\");\r\n    // }\r\n    // return thunkAPI.fulfillWithValue(data);\r\n  }\r\n);\r\n\r\nconst pizzaSlice = createSlice({\r\n  name: \"pizza\",\r\n  initialState,\r\n  reducers: {\r\n    setItems(state, action: PayloadAction<Pizza[]>) {\r\n      state.items = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchPizzas.pending, (state, action) => {\r\n      state.status = \"loading\";\r\n      state.items = [];\r\n    });\r\n    builder.addCase(fetchPizzas.fulfilled, (state, action) => {\r\n      state.items = action.payload;\r\n      state.status = \"success\";\r\n    });\r\n    builder.addCase(fetchPizzas.rejected, (state, action) => {\r\n      state.status = \"error\";\r\n      state.items = [];\r\n    });\r\n  },\r\n});\r\n\r\nexport const selectPizzaData = (state: RootState) => state.pizza;\r\n\r\nexport const { setItems } = pizzaSlice.actions;\r\n\r\nexport default pizzaSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAE/E,OAAOC,KAAK,MAAM,OAAO;AAiBzB,MAAMC,YAA6B,GAAG;EACpCC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,SAAS,CAAE;AACrB,CAAC;;AAED;;AAEA,OAAO,MAAMC,WAAW,GAAGL,gBAAgB,CACzC,yBAAyB,EACzB,OAAOM,MAAM,EAAEC,QAAQ,KAAK;EAC1B,MAAM;IAAEC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAGN,MAAM;EAC/D,MAAM;IAAEO;EAAK,CAAC,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAC7B,0DAAyDF,WAAY,YAAWF,QAAS,WAAUF,MAAO,UAASC,KAAM,GAAEE,MAAO,EAAC,CACrI;;EAED;EACA;EACA;EACA;AACF,CAAC,CACF;;AAED,MAAMI,UAAU,GAAGhB,WAAW,CAAC;EAC7BiB,IAAI,EAAE,OAAO;EACbd,YAAY;EACZe,QAAQ,EAAE;IACRC,QAAQ,CAACC,KAAK,EAAEC,MAA8B,EAAE;MAC9CD,KAAK,CAAChB,KAAK,GAAGiB,MAAM,CAACC,OAAO;IAC9B;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACnB,WAAW,CAACoB,OAAO,EAAE,CAACN,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACf,MAAM,GAAG,SAAS;MACxBe,KAAK,CAAChB,KAAK,GAAG,EAAE;IAClB,CAAC,CAAC;IACFoB,OAAO,CAACC,OAAO,CAACnB,WAAW,CAACqB,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MACxDD,KAAK,CAAChB,KAAK,GAAGiB,MAAM,CAACC,OAAO;MAC5BF,KAAK,CAACf,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC;IACFmB,OAAO,CAACC,OAAO,CAACnB,WAAW,CAACsB,QAAQ,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACf,MAAM,GAAG,OAAO;MACtBe,KAAK,CAAChB,KAAK,GAAG,EAAE;IAClB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAMyB,eAAe,GAAIT,KAAgB,IAAKA,KAAK,CAACU,KAAK;AAEhE,OAAO,MAAM;EAAEX;AAAS,CAAC,GAAGH,UAAU,CAACe,OAAO;AAE9C,eAAef,UAAU,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}